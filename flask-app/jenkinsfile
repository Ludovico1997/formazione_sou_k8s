pipeline {
    agent any
    environment {
        GIT_URL = 'https://github.com/Ludovico1997/formazione_sou_k8s'
        IMAGE_NAME = 'ludo97/my_flask'   // Cambia qui col tuo username Docker Hub
        DOCKER_CREDENTIALS_ID = 'dockerhub-credentials'  // <-- imposta questo ID nel tuo Jenkins
    }

    stages {
        stage('Clona repo git') {
            steps {
                script {
                    echo "Clono la repository da ${GIT_URL}"
                    if ("${GIT_BRANCH}" == "main" || "${GIT_BRANCH}" == "develop"){
                        git url: "${GIT_URL}", branch: "${GIT_BRANCH}"
                        sh 'ls -la'   // Log: vedo i file della repo clonata
                    } else {
                        sh 'echo "Unsupported branch: ${GIT_BRANCH}"'
                    }
                }
                
                
            }
        }
        stage('Docker login') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin'
                    }
                }
            }
        }
        stage('Build & Push Docker image') {
            steps {
                script {

                    // echo "Costruisco Docker image: ${IMAGE_NAME}:${GIT_BRANCH}"
                    echo"${GIT_BRANCH}"
                    if ( "${GIT_BRANCH}" == "main") {
                        def customImage = docker.build("${IMAGE_NAME}:latest", "flask-app")
                        customImage.push()
                        echo "Immagine pushata con successo: ${IMAGE_NAME}:${IMAGE_TAG}"
                    } else if ( "${GIT_BRANCH}" == "develop"){
                        def commitSHA = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                        def IMAGE_TAG = "develop-${commitSHA}"
                        def customImage = docker.build("${IMAGE_NAME}:${IMAGE_TAG}", "flask-app")
                        customImage.push()
                        echo "Immagine pushata con successo: ${IMAGE_NAME}:${IMAGE_TAG}"
                    } else {
                        sh 'echo "Unsupported branch: ${GIT_BRANCH}"'
                    }
                    
                }
            }
        }
    }
}