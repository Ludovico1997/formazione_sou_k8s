- name: Jenkins
  hosts: all
  become: true

  tasks:

    - name: Aggiornare la lista dei pacchetti
      package:
        update_cache: yes
    
    - name: Assicura che pip sia installato
      package:
        name: python3-pip
        state: present

    - name: Installa modulo Python 'requests'
      pip:
        name: requests

    - name: Aggiungi repo Docker su Rocky
      get_url: 
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
      when: ansible_os_family == "RedHat"

    - name: Installa Docker su Rocky
      dnf:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
      when: ansible_os_family == "RedHat"

    - name: Abilitare Docker all'avvio
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Verifica che Docker sia in esecuzione
      command: docker --version
      register: docker_version
      changed_when: false

    - name: Mostra la versione di Docker
      debug:
        var: docker_version.stdout
  
    # Creo una Network dedicata !!
    - name: Creazione di una rete Docker personalizzata
      docker_network:
        name: jenkins_network
        driver: bridge
        ipam_config:
          - subnet: "172.20.1.0/24"

    # serve per avere un immagine sempre aggiornata!
    - name: Pull Jenkins image
      docker_image:
        name: jenkins/jenkins
        tag: lts
        source: pull


    - name: Ensure /var/jenkins_home exists and has correct ownership
      file:
        path: /var/jenkins_home
        state: directory
        owner: 1000
        group: 1000
        recurse: yes
        mode: '0755'
        
    #Installo Container Jenkins (master)
    - name: Run Jenkins container
      docker_container:
        name: jenkins
        image: jenkins/jenkins:lts
        state: started
        restart_policy: always
        ports:
          - "8080:8080"
          - "50000:50000"
        networks:
        - name: jenkins_network        # associazione alla docker netwhork
          ipv4_address: "172.20.1.7"        # assegnazione ip statico
        volumes:
        - jenkins_data:/var/jenkins_home
        - /var/run/docker.sock:/var/run/docker.sock
        - /Users/ludovicoparis/.kube:/root/.kube # Cambiare il percorso !!
      # privileged: true
    # # Automatizzo la creazione di un nodo!
    # - name: Create Jenkins node
    #   community.general.jenkins_node:
    #     url: http://192.168.33.61:8080
    #     user: admin
    #     token: 114fe90b708bc71336075881028f3cfa41
    #     name: docker-agent
    #     state: present
       

    #Installo Container Jenkins (agent)
    - name: Run Jenkins agent container
      docker_container:
        name: jenkins-agent
        image: jenkins/inbound-agent
        state: started
        restart_policy: always
        networks:
        - name: jenkins_network        
          ipv4_address: "172.20.1.8"
        env:
          JENKINS_URL: "http://192.168.33.61:8080"
          JENKINS_SECRET: "f176c33b2e68bce7fa175e28fe65ac153e3bdf537eb91627d81237efbed80f57"
          JENKINS_AGENT_NAME: "docker-agent"
        volumes:
        - jenkins_data:/var/jenkins_home
        - /var/run/docker.sock:/var/run/docker.sock
        - /Users/ludovicoparis/.kube:/root/.kube # Cambiare il percorso !!
        
        # -/Users/ludovicoparis/formazione_sou_k8s/Workstation_Mac:/home/vagrant
    
# Installazione Docker CLI nel container Jenkins Agent
    - name: Aggiorna la cache dei pacchetti dentro Jenkins Agent
      community.docker.docker_container_exec:
        container: jenkins-agent
        command: apt-get update
        user: root
        tty: true

    - name: Installa Docker CLI nel container Jenkins Agent
      community.docker.docker_container_exec:
        container: jenkins-agent
        command: apt-get install -y docker.io
        user: root
        tty: true

    - name: Install sudo
      community.docker.docker_container_exec:
        container: jenkins-agent
        command: apt-get install -y sudo
        user: root
        tty: true

    - name: Aggiungi l'utente jenkins al gruppo docker dentro Jenkins Agent
      community.docker.docker_container_exec:
        container: jenkins-agent
        command: usermod -aG docker jenkins
        user: root
        tty: true

    - name: Installa sudo nel container Jenkins Agent step4
      community.docker.docker_container_exec:
          container:  jenkins-agent
          command: bash -c "echo 'jenkins ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers"
          user: root
          tty: true
          
    - name: Install sudo
      community.docker.docker_container_exec:
        container: jenkins-agent
        command: chown root:docker /var/run/docker.sock
        user: root
        tty: true
    
    # - name: rinomino il config
    #   community.docker.docker_container_exec:
    #     container: jenkins-agent
    #     command: mv /root/.kube/config_kubectl_docker /root/.kube/config
    #     user: root

    # - name: Install kubectl
    #   community.docker.docker_container_exec:
    #     container: jenkins-agent
    #     command:  curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -L -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
    #     user: root
    #     tty: true

    # - name: Install kubectl 2
    #   community.docker.docker_container_exec:
    #     container: jenkins-agent
    #     command: chmod +x ./kubectl
    #     user: root
    #     tty: true

    # - name: Install kubectl 3
    #   community.docker.docker_container_exec:
    #     container: jenkins-agent
    #     command: mv ./kubectl /usr/local/bin/kubectl
    #     user: root
    #     tty: true

    - name: Aggiorna la cache dei pacchetti dentro Jenkins Agent
      community.docker.docker_container_exec:
        container: jenkins
        command: apt-get update
        user: root
        tty: true

    - name: Installa Docker CLI nel container Jenkins Agent
      community.docker.docker_container_exec:
        container: jenkins
        command: apt-get install -y docker.io
        user: root
        tty: true

    - name: Install sudo
      community.docker.docker_container_exec:
        container: jenkins
        command: apt-get install -y sudo
        user: root
        tty: true

    - name: Aggiungi l'utente jenkins al gruppo docker dentro Jenkins Agent
      community.docker.docker_container_exec:
        container: jenkins
        command: usermod -aG docker jenkins
        user: root
        tty: true

    - name: Installa sudo nel container Jenkins Agent step4
      community.docker.docker_container_exec:
          container:  jenkins
          command: bash -c "echo 'jenkins ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers"
          user: root
          tty: true
          
    - name: Install sudo
      community.docker.docker_container_exec:
        container: jenkins
        command: chown root:docker /var/run/docker.sock
        user: root
        tty: true

    # - name: rinomino il config
    #   community.docker.docker_container_exec:
    #     container: jenkins
    #     command: mv /root/.kube/config_kubectl_docker /root/.kube/config
    #     user: root

    # - name: Install kubectl
    #   community.docker.docker_container_exec:
    #     container: jenkins
    #     command:  curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -L -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
    #     user: root
    #     tty: true

    # - name: Install kubectl 2
    #   community.docker.docker_container_exec:
    #     container: jenkins
    #     command: chmod +x kubectl
    #     user: root
    #     tty: true

    # - name: Install kubectl 3
    #   community.docker.docker_container_exec:
    #     container: jenkins
    #     command: mv kubectl /usr/local/bin/kubectl
    #     user: root
    #     tty: true
